{"name":"Flipper","tagline":"feature flipping for ANYTHING","body":"![flipper logo](https://raw.github.com/jnunemaker/flipper-ui/master/lib/flipper/ui/public/images/logo.png)\r\n\r\n<pre>\r\n__\r\n                               _.-~  )\r\n                    _..--~~~~,'   ,-/     _\r\n                 .-'. . . .'   ,-','    ,' )\r\n               ,'. . . _   ,--~,-'__..-'  ,'\r\n             ,'. . .  (@)' ---~~~~      ,'\r\n            /. . . . '~~             ,-'\r\n           /. . . . .             ,-'\r\n          ; . . . .  - .        ,'\r\n         : . . . .       _     /\r\n        . . . . .          `-.:\r\n       . . . ./  - .          )\r\n      .  . . |  _____..---.._/ _____\r\n~---~~~~----~~~~             ~~\r\n</pre>\r\n\r\nFeature flipping is the act of enabling or disabling features or parts of your application, ideally without re-deploying or changing anything in your code base.\r\n\r\nThe goal of this gem is to make turning features on or off so easy that everyone does it. Whatever your data store, throughput, or experience, feature flipping should be easy and have minimal impact on your application.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'flipper'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself with:\r\n\r\n    $ gem install flipper\r\n\r\n## Usage\r\n\r\nThe goal of the API for flipper was to have everything revolve around features and what ways they can be enabled. Start with top level and dig into a feature, then dig in further and enable that feature for a given type of access, as opposed to thinking about how the feature will be accessed first (ie: stats.enable vs activate_group(:stats, ...)).\r\n\r\n```ruby\r\nrequire 'flipper'\r\n\r\n# pick an adapter\r\nrequire 'flipper/adapters/memory'\r\nadapter = Flipper::Adapters::Memory.new\r\n\r\n# get a handy dsl instance\r\nflipper = Flipper.new(adapter)\r\n\r\n# grab a feature\r\nsearch = flipper[:search]\r\n\r\n# check if that feature is enabled\r\nif search.enabled?\r\n  puts 'Search away!'\r\nelse\r\n  puts 'No search for you!'\r\nend\r\n\r\nputs 'Enabling Search...'\r\nsearch.enable\r\n\r\n# check if that feature is enabled again\r\nif search.enabled?\r\n  puts 'Search away!'\r\nelse\r\n  puts 'No search for you!'\r\nend\r\n```\r\n\r\nOf course there are more [examples for you to peruse](https://github.com/jnunemaker/flipper/tree/master/examples).\r\n\r\n## Types\r\n\r\nOut of the box several types of enabling are supported. They are checked in this order.\r\n\r\n### 1. Boolean\r\n\r\nAll on or all off. Think top level things like :stats, :search, :logging, etc. Also, an easy way to release a new feature as once a feature is boolean enabled it is on for every situation.\r\n\r\n```ruby\r\nflipper = Flipper.new(adapter)\r\nflipper[:stats].enable # turn on\r\nflipper[:stats].disable # turn off\r\nflipper[:stats].enabled? # check\r\n```\r\n\r\n### 2. Group\r\n\r\nTurn on feature based on value of block. Super flexible way to turn on a feature for multiple things (users, people, accounts, etc.)\r\n\r\n```ruby\r\nFlipper.register(:admins) do |actor|\r\n  actor.respond_to?(:admin?) && actor.admin?\r\nend\r\n\r\nflipper = Flipper.new(adapter)\r\nflipper[:stats].enable flipper.group(:admins) # turn on for admins\r\nflipper[:stats].disable flipper.group(:admins) # turn off for admins\r\nperson = Person.find(params[:id])\r\nflipper[:stats].enabled? person # check if enabled, returns true if person.admin? is true\r\n```\r\n\r\nThere is no requirement that the thing yielded to the block be a user model or whatever. It can be anything you want therefore it is a good idea to check that the thing passed into the group block actually responds to what you are trying.\r\n\r\n### 3. Individual Actor\r\n\r\nTurn feature on for individual thing. Think enable feature for someone to test or for a buddy. The only requirement for an individual actor is that it must respond to `flipper_id`.\r\n\r\n```ruby\r\nflipper = Flipper.new(adapter)\r\n\r\nflipper[:stats].enable user\r\nflipper[:stats].enabled? user # true\r\n\r\nflipper[:stats].disable user\r\nflipper[:stats].enabled? user # false\r\n\r\n# you can enable anything, does not need to be user or person\r\nflipper[:search].enable group\r\nflipper[:search].enabled? group\r\n```\r\n\r\nThe key is to make sure you do not enable two different types of objects for the same feature. Imagine that user has a flipper_id of 6 and group has a flipper_id of 6. Enabling search for user would automatically enable it for group, as they both have a flipper_id of 6.\r\n\r\nThe one exception to this rule is if you have globally unique flipper_ids, such as uuid's. If your flipper_ids are unique globally in your entire system, enabling two different types should be safe. Another way around this is to prefix the flipper_id with the class name like this:\r\n\r\n```ruby\r\nclass User\r\n  def flipper_id\r\n    \"User:#{id}\"\r\n  end\r\nend\r\n\r\nclass Group\r\n  def flipper_id\r\n    \"Group:#{id}\"\r\n  end\r\nend\r\n```\r\n\r\n### 4. Percentage of Actors\r\n\r\nTurn this on for a percentage of actors (think user, member, account, group, whatever). Consistently on or off for this user as long as percentage increases. Think slow rollout of a new feature to a percentage of things.\r\n\r\n```ruby\r\nflipper = Flipper.new(adapter)\r\n\r\n# returns a percentage of actors instance set to 10\r\npercentage = flipper.actors(10)\r\n\r\n# turn stats on for 10 percent of users in the system\r\nflipper[:stats].enable percentage\r\n\r\n# checks if actor's flipper_id is in the enabled percentage by hashing\r\n# user.flipper_id.to_s to ensure enabled distribution is smooth\r\nflipper[:stats].enabled? user\r\n\r\n```\r\n\r\n### 5. Percentage of Random\r\n\r\nTurn this on for a random percentage of time. Think load testing new features behind the scenes and such.\r\n\r\n```ruby\r\nflipper = Flipper.new(adapter)\r\n\r\n# get percentage of random instance set to 5\r\npercentage = flipper.random(5)\r\n\r\n# turn on logging for 5 percent of the time randomly\r\n# could be on during one request and off the next\r\n# could even be on first time in request and off second time\r\nflipper[:logging].enable percentage\r\n```\r\n\r\nRandomness is not a good idea for enabling new features in the UI. Most of the time you want a feature on or off for a user, but there are definitely times when I have found percentage of random to be very useful.\r\n\r\n## Adapters\r\n\r\nI plan on supporting [in-memory](https://github.com/jnunemaker/flipper/blob/master/lib/flipper/adapters/memory.rb), [Mongo](https://github.com/jnunemaker/flipper-mongo), and [Redis](https://github.com/jnunemaker/flipper-redis) as adapters for flipper. Others are welcome, so please let me know if you create one.\r\n\r\n* [memory adapter](https://github.com/jnunemaker/flipper/blob/master/lib/flipper/adapters/memory.rb) - Great for tests.\r\n* [mongo adapter](https://github.com/jnunemaker/flipper-mongo)\r\n* [redis adapter](https://github.com/jnunemaker/flipper-redis)\r\n* [cassanity adapter](https://github.com/jnunemaker/flipper-cassanity)\r\n\r\nThe basic API for an adapter is this:\r\n\r\n* `features` - Get the set of known features.\r\n* `add(feature)` - Add a feature to the set of known features.\r\n* `remove(feature)` - Remove a feature from the set of known features.\r\n* `clear(feature)` - Clear all gate values for a feature.\r\n* `get(feature)` - Get all gate values for a feature.\r\n* `enable(feature, gate, thing)` - Enable a gate for a thing.\r\n* `disable(feature, gate, thing)` - Disable a gate for a thing.\r\n\r\nIf you would like to make your own adapter, there are shared adapter specs that you can use to verify that you have everything working correctly.\r\n\r\nFor example, here is what the in-memory adapter spec looks like:\r\n\r\n```ruby\r\nrequire 'helper'\r\nrequire 'flipper/adapters/memory'\r\n\r\n# The shared specs are included with the flipper gem so you can use them in\r\n# separate adapter specific gems.\r\nrequire 'flipper/spec/shared_adapter_specs'\r\n\r\ndescribe Flipper::Adapters::Memory do\r\n\r\n  # an instance of the new adapter you are trying to create\r\n  subject { described_class.new }\r\n\r\n  # include the shared specs that the subject must pass\r\n  it_should_behave_like 'a flipper adapter'\r\nend\r\n```\r\n\r\nA good place to start when creating your own adapter is to copy one of the adapters mentioned above and replace the client specific code with whatever client you are attempting to adapt.\r\n\r\nI would also recommend setting `fail_fast = true` in your RSpec configuration as that will just give you one failure at a time to work through. It is also handy to have the shared adapter spec file open.\r\n\r\n## Optimization\r\n\r\nOne optimization that flipper provides is a memoizing middleware. The memoizing middleware ensures that you only make one adapter call per feature per request.\r\n\r\nThis means if you check the same feature over and over, it will only make one mongo, redis, or whatever call per feature for the length of the request.\r\n\r\nYou can use the middleware from a Rails initializer like so:\r\n\r\n```ruby\r\n# create flipper dsl instance, see above Usage for more details\r\nflipper = Flipper.new(...)\r\n\r\nrequire 'flipper/middleware/memoizer'\r\nconfig.middleware.use Flipper::Middleware::Memoizer, flipper\r\n```\r\n\r\nIf you set your flipper instance up in an initializer, you can pass a block to the middleware and it will lazily load the instance the first time the middleware is invoked.\r\n\r\n```ruby\r\n# config/initializers/flipper.rb\r\n$flipper = Flipper.new(...)\r\n\r\n# config/application.rb\r\nconfig.middleware.use Flipper::Middleware::Memoizer, lambda { $flipper }\r\n```\r\n\r\n**Note**: Be sure that the middlware is high enough up in your stack that all feature checks are wrapped.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## Coming Soon™\r\n\r\n* [Web UI](https://github.com/jnunemaker/flipper-ui) (think resque UI for features toggling/status)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}